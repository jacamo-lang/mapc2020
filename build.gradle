/*
   Project JaCaMo for MAPC 2020
*/

defaultTasks 'run'

apply plugin: 'java'

version '0.10'
group   'org.jacamo.mapc'

sourceCompatibility = 1.13
targetCompatibility = 1.13

repositories {
    mavenCentral()

    //maven { url "http://jacamo.sourceforge.net/maven2" }
    maven { url "https://raw.github.com/jacamo-lang/mvn-repo/master" }
    flatDir {
       dirs 'libs'
    }
}

dependencies {
	implementation 'org.jacamo:jacamo:0.10-SNAPSHOT'
	implementation 'org.jason:jason:2.6.1'
    implementation 'org.jacamo:jacamo-web:0.6-SNAPSHOT'
    implementation name: 'search'
    implementation name: 'eismassim-4.3-jar-with-dependencies'
    implementation name: 'server-2020-2.0-jar-with-dependencies'
	implementation 'com.google.guava:guava:29.0-jre'
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation 'org.apache.commons:commons-lang3:3.11'

	testCompile group: 'junit', name: 'junit', version: '4.12'
}

sourceSets {
    main {
        java {
            srcDir 'src/env'
            srcDir 'src/agt'
            srcDir 'src/org'
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

if (JavaVersion.current() < project.targetCompatibility) {
    println "The java version used ${JavaVersion.current()}, it is expected version ${project.targetCompatibility}."
}

task stage (type: JavaExec, dependsOn: 'classes') {
    group      ' MAPC'
    description 'run teams'
    doFirst {
        mkdir 'log'
    }
    standardInput = System.in
    jvmArgs = ['-Xss15m','-Djava.awt.headless=true']
    main 'runMAPC2020.RunTeam'
    args = ['src/jcm/individualist.jcm']
    classpath sourceSets.main.runtimeClasspath
}

task createProperties(dependsOn: processResources) {
	doLast {
		new File("$buildDir/version.properties").withWriter { w ->
			Properties p = new Properties()
			p['version'] = project.version.toString()
			p.store w, null
		}
	}
}
tasks.classes.dependsOn createProperties

task run (type: JavaExec, dependsOn: 'classes') {
    group      ' MAPC'
    description 'run teams'
    doFirst {
        mkdir 'log'
    }
    standardInput = System.in
    jvmArgs = ['-Xss15m','-Djava.awt.headless=true']
    main 'runMAPC2020.RunTeam'
    args = ['src/jcm/collectivist.jcm']
    classpath sourceSets.main.runtimeClasspath
}

task testGoal (type: JavaExec, dependsOn: 'classes') {
    group      ' MAPC'
    description 'run teams'
    doFirst {
        mkdir 'log'
    }
    standardInput = System.in
    jvmArgs = ['-Xss15m']
    main 'runMAPC2020.RunTeam'
    args = ['src/jcm/individualist.jcm']
    classpath sourceSets.main.runtimeClasspath
}

task playground (type: JavaExec, dependsOn: 'classes') {
    group      ' MAPC'
    description 'run teams'
    doFirst {
        mkdir 'log'
    }
    standardInput = System.in
    standardOutput = System.out
    main 'jacamo.infra.JaCaMoLauncher'
    args = ['src/jcm/playground.jcm', '--log-conf', '$jasonJar/templates/console-info-logging.properties']
    classpath sourceSets.main.runtimeClasspath
}

task testJaCaMo {
    description 'runs JaCaMo unit tests: unit_tests_project.jcm'
    def errorOnTests = false
    outputs.upToDateWhen { false } // disable cache

    doFirst {
        try {
            javaexec {
                main = 'jacamo.infra.JaCaMoLauncher'
                if (gradle.startParameter.logLevel.toString().equals("DEBUG")) {
                    args = ['$jacamoJar/test/jacamo/unit_tests_project.jcm', '--log-conf', '$jasonJar/templates/console-debug-logging.properties']
                } else if (gradle.startParameter.logLevel.toString().equals("INFO")) {
                    args = ['$jacamoJar/test/jacamo/unit_tests_project.jcm', '--log-conf', '$jasonJar/templates/console-info-logging.properties']
                } else {
                    args = ['$jacamoJar/test/jacamo/unit_tests_project.jcm', '--log-conf', '$jasonJar/templates/console-lifecycle-logging.properties']
                }
                classpath sourceSets.main.runtimeClasspath

                errorOutput = new ByteArrayOutputStream()
                standardOutput = new ByteArrayOutputStream()

                ext.stdout = {
                    return standardOutput.toString()
                }
                ext.errout = {
                    return errorOutput.toString()
                }
            }
        } catch (Exception e) {
            errorOnTests = true
        }
    }

    doLast {
        def styler = 'black red green yellow blue magenta cyan white'
            .split().toList().withIndex(30)
            .collectEntries { key, val -> [(key) : { "\033[${val}m${it}\033[0m" }] }

        def std = stdout()
        std.splitEachLine('\n') { String line ->
            line = line.replace("TESTING","${styler['yellow']('TESTING')}")
            line = line.replace("PASSED","${styler['green']('PASSED')}")
            line = line.replace("FAILED","${styler['red']('FAILED')}")
            line = line.replace("TODO","${styler['magenta']('TODO')}")
            line = line.replace("LAUNCHING","${styler['blue']('LAUNCHING')}")
            println line
        }

        def err = errout()
        err.splitEachLine('\n') { String line ->
            line = line.replace("TESTING","${styler['yellow']('TESTING')}")
            line = line.replace("PASSED","${styler['green']('PASSED')}")
            line = line.replace("FAILED","${styler['red']('FAILED')}")
            line = line.replace("TODO","${styler['magenta']('TODO')}")
            line = line.replace("LAUNCHING","${styler['blue']('LAUNCHING')}")
            println line
        }

        if (errorOnTests) {
            throw new GradleException('Jason unit tests: ERROR!')
        }
    }
}
tasks.test.finalizedBy testJaCaMo

task fixTab {
    ant.fixcrlf(eol: 'lf',  includes: '**/*.txt,**/*.bat, **/*.adoc', srcdir: '.')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml', srcdir: 'src')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.jcm', srcdir: '.')
    //ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.jcm,**/*.txt', srcdir: 'doc')
}

task runMAB(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "mabOptimizer.MABSimulator"
}


clean {
    delete 'bin'
    delete 'build'
    delete 'log'
    delete 'logs'
    delete 'replays'
}
